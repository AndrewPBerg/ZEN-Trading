services:
  # Backend service using backend/Dockerfile
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "42069:42069"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=pgsql
    command: ["uv", "run", "manage.py", "runserver", "0.0.0.0:42069"]
    depends_on:
      pgsql:
        condition: service_healthy
    networks:
      - zen-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:42069/health/"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service using frontend/Dockerfile  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "6969:6969"
    environment:
      - PORT=6969
      - NEXT_PUBLIC_API_URL=http://localhost:42069
      - NODE_ENV= "development"
      - NEXT_TELEMETRY_DISABLED= "1"
      - WATCHPACK_POLLING= "true"
      - CHOKIDAR_USEPOLLING= "true"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - zen-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6969"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  testing:
    build:
      context: ./testing
      dockerfile: DOCKERFILE
    ports:
      - "42061:42061"
    environment:
      - PORT=42061
      - DATABASE_URL=postgresql://zenuser:zenpass@pgsql:5432/zentrading
    depends_on:
      pgsql:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - zen-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:42061/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 18-alpine database
  pgsql:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zentrading
      - POSTGRES_USER=zenuser
      - POSTGRES_PASSWORD=zenpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - zen-trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zenuser -d zentrading"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:

networks:
  zen-trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
